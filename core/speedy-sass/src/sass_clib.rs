/* automatically generated by rust-bindgen 0.59.2 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
  #[allow(unused_imports)]
  use self::super::root;
  pub const true_: u32 = 1;
  pub const false_: u32 = 0;
  pub const __bool_true_false_are_defined: u32 = 1;
  pub const LIBSASS_VERSION: &[u8; 5usize] = b"[NA]\0";
  pub const LIBSASS_LANGUAGE_VERSION: &[u8; 4usize] = b"3.5\0";
  pub const SASS2SCSS_PRETTIFY_0: u32 = 0;
  pub const SASS2SCSS_PRETTIFY_1: u32 = 1;
  pub const SASS2SCSS_PRETTIFY_2: u32 = 2;
  pub const SASS2SCSS_PRETTIFY_3: u32 = 3;
  pub const SASS2SCSS_KEEP_COMMENT: u32 = 32;
  pub const SASS2SCSS_STRIP_COMMENT: u32 = 64;
  pub const SASS2SCSS_CONVERT_COMMENT: u32 = 128;
  pub type size_t = ::std::os::raw::c_ulong;
  pub type wchar_t = ::std::os::raw::c_int;
  pub type max_align_t = f64;
  pub const Sass_Output_Style_SASS_STYLE_NESTED: root::Sass_Output_Style = 0;
  pub const Sass_Output_Style_SASS_STYLE_EXPANDED: root::Sass_Output_Style = 1;
  pub const Sass_Output_Style_SASS_STYLE_COMPACT: root::Sass_Output_Style = 2;
  pub const Sass_Output_Style_SASS_STYLE_COMPRESSED: root::Sass_Output_Style = 3;
  pub const Sass_Output_Style_SASS_STYLE_INSPECT: root::Sass_Output_Style = 4;
  pub const Sass_Output_Style_SASS_STYLE_TO_SASS: root::Sass_Output_Style = 5;
  pub const Sass_Output_Style_SASS_STYLE_TO_CSS: root::Sass_Output_Style = 6;
  pub type Sass_Output_Style = ::std::os::raw::c_uint;
  extern "C" {
    pub fn sass_alloc_memory(size: root::size_t) -> *mut ::std::os::raw::c_void;
  }
  extern "C" {
    pub fn sass_copy_c_string(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_free_memory(ptr: *mut ::std::os::raw::c_void);
  }
  extern "C" {
    pub fn sass_string_quote(
      str_: *const ::std::os::raw::c_char,
      quote_mark: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_string_unquote(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn libsass_version() -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn libsass_language_version() -> *const ::std::os::raw::c_char;
  }
  #[repr(C)]
  #[derive(Copy, Clone)]
  pub struct Sass_Value {
    _unused: [u8; 0],
  }
  pub const Sass_Tag_SASS_BOOLEAN: root::Sass_Tag = 0;
  pub const Sass_Tag_SASS_NUMBER: root::Sass_Tag = 1;
  pub const Sass_Tag_SASS_COLOR: root::Sass_Tag = 2;
  pub const Sass_Tag_SASS_STRING: root::Sass_Tag = 3;
  pub const Sass_Tag_SASS_LIST: root::Sass_Tag = 4;
  pub const Sass_Tag_SASS_MAP: root::Sass_Tag = 5;
  pub const Sass_Tag_SASS_NULL: root::Sass_Tag = 6;
  pub const Sass_Tag_SASS_ERROR: root::Sass_Tag = 7;
  pub const Sass_Tag_SASS_WARNING: root::Sass_Tag = 8;
  pub type Sass_Tag = ::std::os::raw::c_uint;
  pub const Sass_Separator_SASS_COMMA: root::Sass_Separator = 0;
  pub const Sass_Separator_SASS_SPACE: root::Sass_Separator = 1;
  pub const Sass_Separator_SASS_HASH: root::Sass_Separator = 2;
  pub type Sass_Separator = ::std::os::raw::c_uint;
  pub const Sass_OP_AND: root::Sass_OP = 0;
  pub const Sass_OP_OR: root::Sass_OP = 1;
  pub const Sass_OP_EQ: root::Sass_OP = 2;
  pub const Sass_OP_NEQ: root::Sass_OP = 3;
  pub const Sass_OP_GT: root::Sass_OP = 4;
  pub const Sass_OP_GTE: root::Sass_OP = 5;
  pub const Sass_OP_LT: root::Sass_OP = 6;
  pub const Sass_OP_LTE: root::Sass_OP = 7;
  pub const Sass_OP_ADD: root::Sass_OP = 8;
  pub const Sass_OP_SUB: root::Sass_OP = 9;
  pub const Sass_OP_MUL: root::Sass_OP = 10;
  pub const Sass_OP_DIV: root::Sass_OP = 11;
  pub const Sass_OP_MOD: root::Sass_OP = 12;
  pub const Sass_OP_NUM_OPS: root::Sass_OP = 13;
  pub type Sass_OP = ::std::os::raw::c_uint;
  extern "C" {
    pub fn sass_make_null() -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_boolean(val: bool) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_string(val: *const ::std::os::raw::c_char) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_qstring(val: *const ::std::os::raw::c_char) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_number(val: f64, unit: *const ::std::os::raw::c_char)
      -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_color(r: f64, g: f64, b: f64, a: f64) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_list(
      len: root::size_t,
      sep: root::Sass_Separator,
      is_bracketed: bool,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_map(len: root::size_t) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_error(msg: *const ::std::os::raw::c_char) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_make_warning(msg: *const ::std::os::raw::c_char) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_delete_value(val: *mut root::Sass_Value);
  }
  extern "C" {
    pub fn sass_clone_value(val: *const root::Sass_Value) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_value_op(
      op: root::Sass_OP,
      a: *const root::Sass_Value,
      b: *const root::Sass_Value,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_value_stringify(
      a: *const root::Sass_Value,
      compressed: bool,
      precision: ::std::os::raw::c_int,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_value_get_tag(v: *const root::Sass_Value) -> root::Sass_Tag;
  }
  extern "C" {
    pub fn sass_value_is_null(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_number(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_string(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_boolean(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_color(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_list(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_map(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_error(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_value_is_warning(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_number_get_value(v: *const root::Sass_Value) -> f64;
  }
  extern "C" {
    pub fn sass_number_set_value(v: *mut root::Sass_Value, value: f64);
  }
  extern "C" {
    pub fn sass_number_get_unit(v: *const root::Sass_Value) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_number_set_unit(v: *mut root::Sass_Value, unit: *mut ::std::os::raw::c_char);
  }
  extern "C" {
    pub fn sass_string_get_value(v: *const root::Sass_Value) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_string_set_value(v: *mut root::Sass_Value, value: *mut ::std::os::raw::c_char);
  }
  extern "C" {
    pub fn sass_string_is_quoted(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_string_set_quoted(v: *mut root::Sass_Value, quoted: bool);
  }
  extern "C" {
    pub fn sass_boolean_get_value(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_boolean_set_value(v: *mut root::Sass_Value, value: bool);
  }
  extern "C" {
    pub fn sass_color_get_r(v: *const root::Sass_Value) -> f64;
  }
  extern "C" {
    pub fn sass_color_set_r(v: *mut root::Sass_Value, r: f64);
  }
  extern "C" {
    pub fn sass_color_get_g(v: *const root::Sass_Value) -> f64;
  }
  extern "C" {
    pub fn sass_color_set_g(v: *mut root::Sass_Value, g: f64);
  }
  extern "C" {
    pub fn sass_color_get_b(v: *const root::Sass_Value) -> f64;
  }
  extern "C" {
    pub fn sass_color_set_b(v: *mut root::Sass_Value, b: f64);
  }
  extern "C" {
    pub fn sass_color_get_a(v: *const root::Sass_Value) -> f64;
  }
  extern "C" {
    pub fn sass_color_set_a(v: *mut root::Sass_Value, a: f64);
  }
  extern "C" {
    pub fn sass_list_get_length(v: *const root::Sass_Value) -> root::size_t;
  }
  extern "C" {
    pub fn sass_list_get_separator(v: *const root::Sass_Value) -> root::Sass_Separator;
  }
  extern "C" {
    pub fn sass_list_set_separator(v: *mut root::Sass_Value, value: root::Sass_Separator);
  }
  extern "C" {
    pub fn sass_list_get_is_bracketed(v: *const root::Sass_Value) -> bool;
  }
  extern "C" {
    pub fn sass_list_set_is_bracketed(v: *mut root::Sass_Value, value: bool);
  }
  extern "C" {
    pub fn sass_list_get_value(
      v: *const root::Sass_Value,
      i: root::size_t,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_list_set_value(
      v: *mut root::Sass_Value,
      i: root::size_t,
      value: *mut root::Sass_Value,
    );
  }
  extern "C" {
    pub fn sass_map_get_length(v: *const root::Sass_Value) -> root::size_t;
  }
  extern "C" {
    pub fn sass_map_get_key(v: *const root::Sass_Value, i: root::size_t) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_map_set_key(v: *mut root::Sass_Value, i: root::size_t, arg1: *mut root::Sass_Value);
  }
  extern "C" {
    pub fn sass_map_get_value(v: *const root::Sass_Value, i: root::size_t)
      -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_map_set_value(
      v: *mut root::Sass_Value,
      i: root::size_t,
      arg1: *mut root::Sass_Value,
    );
  }
  extern "C" {
    pub fn sass_error_get_message(v: *const root::Sass_Value) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_error_set_message(v: *mut root::Sass_Value, msg: *mut ::std::os::raw::c_char);
  }
  extern "C" {
    pub fn sass_warning_get_message(v: *const root::Sass_Value) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_warning_set_message(v: *mut root::Sass_Value, msg: *mut ::std::os::raw::c_char);
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Env {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Callee {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Import {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Options {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Compiler {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Importer {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Function {
    _unused: [u8; 0],
  }
  pub type Sass_Env_Frame = *mut root::Sass_Env;
  pub type Sass_Callee_Entry = *mut root::Sass_Callee;
  pub type Sass_Import_Entry = *mut root::Sass_Import;
  pub type Sass_Import_List = *mut *mut root::Sass_Import;
  pub type Sass_Importer_Entry = *mut root::Sass_Importer;
  pub type Sass_Importer_List = *mut *mut root::Sass_Importer;
  pub type Sass_Importer_Fn = ::std::option::Option<
    unsafe extern "C" fn(
      url: *const ::std::os::raw::c_char,
      cb: root::Sass_Importer_Entry,
      compiler: *mut root::Sass_Compiler,
    ) -> root::Sass_Import_List,
  >;
  pub type Sass_Function_Entry = *mut root::Sass_Function;
  pub type Sass_Function_List = *mut *mut root::Sass_Function;
  pub type Sass_Function_Fn = ::std::option::Option<
    unsafe extern "C" fn(
      arg1: *const root::Sass_Value,
      cb: root::Sass_Function_Entry,
      compiler: *mut root::Sass_Compiler,
    ) -> *mut root::Sass_Value,
  >;
  pub const Sass_Callee_Type_SASS_CALLEE_MIXIN: root::Sass_Callee_Type = 0;
  pub const Sass_Callee_Type_SASS_CALLEE_FUNCTION: root::Sass_Callee_Type = 1;
  pub const Sass_Callee_Type_SASS_CALLEE_C_FUNCTION: root::Sass_Callee_Type = 2;
  pub type Sass_Callee_Type = ::std::os::raw::c_uint;
  extern "C" {
    pub fn sass_make_importer_list(length: root::size_t) -> root::Sass_Importer_List;
  }
  extern "C" {
    pub fn sass_importer_get_list_entry(
      list: root::Sass_Importer_List,
      idx: root::size_t,
    ) -> root::Sass_Importer_Entry;
  }
  extern "C" {
    pub fn sass_importer_set_list_entry(
      list: root::Sass_Importer_List,
      idx: root::size_t,
      entry: root::Sass_Importer_Entry,
    );
  }
  extern "C" {
    pub fn sass_delete_importer_list(list: root::Sass_Importer_List);
  }
  extern "C" {
    pub fn sass_make_importer(
      importer: root::Sass_Importer_Fn,
      priority: f64,
      cookie: *mut ::std::os::raw::c_void,
    ) -> root::Sass_Importer_Entry;
  }
  extern "C" {
    pub fn sass_importer_get_function(cb: root::Sass_Importer_Entry) -> root::Sass_Importer_Fn;
  }
  extern "C" {
    pub fn sass_importer_get_priority(cb: root::Sass_Importer_Entry) -> f64;
  }
  extern "C" {
    pub fn sass_importer_get_cookie(cb: root::Sass_Importer_Entry) -> *mut ::std::os::raw::c_void;
  }
  extern "C" {
    pub fn sass_delete_importer(cb: root::Sass_Importer_Entry);
  }
  extern "C" {
    pub fn sass_make_import_list(length: root::size_t) -> root::Sass_Import_List;
  }
  extern "C" {
    pub fn sass_make_import_entry(
      path: *const ::std::os::raw::c_char,
      source: *mut ::std::os::raw::c_char,
      srcmap: *mut ::std::os::raw::c_char,
    ) -> root::Sass_Import_Entry;
  }
  extern "C" {
    pub fn sass_make_import(
      imp_path: *const ::std::os::raw::c_char,
      abs_base: *const ::std::os::raw::c_char,
      source: *mut ::std::os::raw::c_char,
      srcmap: *mut ::std::os::raw::c_char,
    ) -> root::Sass_Import_Entry;
  }
  extern "C" {
    pub fn sass_import_set_error(
      import: root::Sass_Import_Entry,
      message: *const ::std::os::raw::c_char,
      line: root::size_t,
      col: root::size_t,
    ) -> root::Sass_Import_Entry;
  }
  extern "C" {
    pub fn sass_import_set_list_entry(
      list: root::Sass_Import_List,
      idx: root::size_t,
      entry: root::Sass_Import_Entry,
    );
  }
  extern "C" {
    pub fn sass_import_get_list_entry(
      list: root::Sass_Import_List,
      idx: root::size_t,
    ) -> root::Sass_Import_Entry;
  }
  extern "C" {
    pub fn sass_callee_get_name(arg1: root::Sass_Callee_Entry) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_callee_get_path(arg1: root::Sass_Callee_Entry) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_callee_get_line(arg1: root::Sass_Callee_Entry) -> root::size_t;
  }
  extern "C" {
    pub fn sass_callee_get_column(arg1: root::Sass_Callee_Entry) -> root::size_t;
  }
  extern "C" {
    pub fn sass_callee_get_type(arg1: root::Sass_Callee_Entry) -> root::Sass_Callee_Type;
  }
  extern "C" {
    pub fn sass_callee_get_env(arg1: root::Sass_Callee_Entry) -> root::Sass_Env_Frame;
  }
  extern "C" {
    pub fn sass_env_get_lexical(
      arg1: root::Sass_Env_Frame,
      arg2: *const ::std::os::raw::c_char,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_env_set_lexical(
      arg1: root::Sass_Env_Frame,
      arg2: *const ::std::os::raw::c_char,
      arg3: *mut root::Sass_Value,
    );
  }
  extern "C" {
    pub fn sass_env_get_local(
      arg1: root::Sass_Env_Frame,
      arg2: *const ::std::os::raw::c_char,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_env_set_local(
      arg1: root::Sass_Env_Frame,
      arg2: *const ::std::os::raw::c_char,
      arg3: *mut root::Sass_Value,
    );
  }
  extern "C" {
    pub fn sass_env_get_global(
      arg1: root::Sass_Env_Frame,
      arg2: *const ::std::os::raw::c_char,
    ) -> *mut root::Sass_Value;
  }
  extern "C" {
    pub fn sass_env_set_global(
      arg1: root::Sass_Env_Frame,
      arg2: *const ::std::os::raw::c_char,
      arg3: *mut root::Sass_Value,
    );
  }
  extern "C" {
    pub fn sass_import_get_imp_path(arg1: root::Sass_Import_Entry)
      -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_import_get_abs_path(arg1: root::Sass_Import_Entry)
      -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_import_get_source(arg1: root::Sass_Import_Entry) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_import_get_srcmap(arg1: root::Sass_Import_Entry) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_import_take_source(arg1: root::Sass_Import_Entry) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_import_take_srcmap(arg1: root::Sass_Import_Entry) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_import_get_error_line(arg1: root::Sass_Import_Entry) -> root::size_t;
  }
  extern "C" {
    pub fn sass_import_get_error_column(arg1: root::Sass_Import_Entry) -> root::size_t;
  }
  extern "C" {
    pub fn sass_import_get_error_message(
      arg1: root::Sass_Import_Entry,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_delete_import_list(arg1: root::Sass_Import_List);
  }
  extern "C" {
    pub fn sass_delete_import(arg1: root::Sass_Import_Entry);
  }
  extern "C" {
    pub fn sass_make_function_list(length: root::size_t) -> root::Sass_Function_List;
  }
  extern "C" {
    pub fn sass_make_function(
      signature: *const ::std::os::raw::c_char,
      cb: root::Sass_Function_Fn,
      cookie: *mut ::std::os::raw::c_void,
    ) -> root::Sass_Function_Entry;
  }
  extern "C" {
    pub fn sass_delete_function(entry: root::Sass_Function_Entry);
  }
  extern "C" {
    pub fn sass_delete_function_list(list: root::Sass_Function_List);
  }
  extern "C" {
    pub fn sass_function_get_list_entry(
      list: root::Sass_Function_List,
      pos: root::size_t,
    ) -> root::Sass_Function_Entry;
  }
  extern "C" {
    pub fn sass_function_set_list_entry(
      list: root::Sass_Function_List,
      pos: root::size_t,
      cb: root::Sass_Function_Entry,
    );
  }
  extern "C" {
    pub fn sass_function_get_signature(
      cb: root::Sass_Function_Entry,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_function_get_function(cb: root::Sass_Function_Entry) -> root::Sass_Function_Fn;
  }
  extern "C" {
    pub fn sass_function_get_cookie(cb: root::Sass_Function_Entry) -> *mut ::std::os::raw::c_void;
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Context {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_File_Context {
    _unused: [u8; 0],
  }
  #[repr(C)]
  #[derive(Debug, Copy, Clone)]
  pub struct Sass_Data_Context {
    _unused: [u8; 0],
  }
  pub const Sass_Compiler_State_SASS_COMPILER_CREATED: root::Sass_Compiler_State = 0;
  pub const Sass_Compiler_State_SASS_COMPILER_PARSED: root::Sass_Compiler_State = 1;
  pub const Sass_Compiler_State_SASS_COMPILER_EXECUTED: root::Sass_Compiler_State = 2;
  pub type Sass_Compiler_State = ::std::os::raw::c_uint;
  extern "C" {
    pub fn sass_make_options() -> *mut root::Sass_Options;
  }
  extern "C" {
    pub fn sass_make_file_context(
      input_path: *const ::std::os::raw::c_char,
    ) -> *mut root::Sass_File_Context;
  }
  extern "C" {
    pub fn sass_make_data_context(
      source_string: *mut ::std::os::raw::c_char,
    ) -> *mut root::Sass_Data_Context;
  }
  extern "C" {
    pub fn sass_compile_file_context(ctx: *mut root::Sass_File_Context) -> ::std::os::raw::c_int;
  }
  extern "C" {
    pub fn sass_compile_data_context(ctx: *mut root::Sass_Data_Context) -> ::std::os::raw::c_int;
  }
  extern "C" {
    pub fn sass_make_file_compiler(
      file_ctx: *mut root::Sass_File_Context,
    ) -> *mut root::Sass_Compiler;
  }
  extern "C" {
    pub fn sass_make_data_compiler(
      data_ctx: *mut root::Sass_Data_Context,
    ) -> *mut root::Sass_Compiler;
  }
  extern "C" {
    pub fn sass_compiler_parse(compiler: *mut root::Sass_Compiler) -> ::std::os::raw::c_int;
  }
  extern "C" {
    pub fn sass_compiler_execute(compiler: *mut root::Sass_Compiler) -> ::std::os::raw::c_int;
  }
  extern "C" {
    pub fn sass_delete_compiler(compiler: *mut root::Sass_Compiler);
  }
  extern "C" {
    pub fn sass_delete_options(options: *mut root::Sass_Options);
  }
  extern "C" {
    pub fn sass_delete_file_context(ctx: *mut root::Sass_File_Context);
  }
  extern "C" {
    pub fn sass_delete_data_context(ctx: *mut root::Sass_Data_Context);
  }
  extern "C" {
    pub fn sass_file_context_get_context(
      file_ctx: *mut root::Sass_File_Context,
    ) -> *mut root::Sass_Context;
  }
  extern "C" {
    pub fn sass_data_context_get_context(
      data_ctx: *mut root::Sass_Data_Context,
    ) -> *mut root::Sass_Context;
  }
  extern "C" {
    pub fn sass_context_get_options(ctx: *mut root::Sass_Context) -> *mut root::Sass_Options;
  }
  extern "C" {
    pub fn sass_file_context_get_options(
      file_ctx: *mut root::Sass_File_Context,
    ) -> *mut root::Sass_Options;
  }
  extern "C" {
    pub fn sass_data_context_get_options(
      data_ctx: *mut root::Sass_Data_Context,
    ) -> *mut root::Sass_Options;
  }
  extern "C" {
    pub fn sass_file_context_set_options(
      file_ctx: *mut root::Sass_File_Context,
      opt: *mut root::Sass_Options,
    );
  }
  extern "C" {
    pub fn sass_data_context_set_options(
      data_ctx: *mut root::Sass_Data_Context,
      opt: *mut root::Sass_Options,
    );
  }
  extern "C" {
    pub fn sass_option_get_precision(options: *mut root::Sass_Options) -> ::std::os::raw::c_int;
  }
  extern "C" {
    pub fn sass_option_get_output_style(
      options: *mut root::Sass_Options,
    ) -> root::Sass_Output_Style;
  }
  extern "C" {
    pub fn sass_option_get_source_comments(options: *mut root::Sass_Options) -> bool;
  }
  extern "C" {
    pub fn sass_option_get_source_map_embed(options: *mut root::Sass_Options) -> bool;
  }
  extern "C" {
    pub fn sass_option_get_source_map_contents(options: *mut root::Sass_Options) -> bool;
  }
  extern "C" {
    pub fn sass_option_get_source_map_file_urls(options: *mut root::Sass_Options) -> bool;
  }
  extern "C" {
    pub fn sass_option_get_omit_source_map_url(options: *mut root::Sass_Options) -> bool;
  }
  extern "C" {
    pub fn sass_option_get_is_indented_syntax_src(options: *mut root::Sass_Options) -> bool;
  }
  extern "C" {
    pub fn sass_option_get_indent(
      options: *mut root::Sass_Options,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_linefeed(
      options: *mut root::Sass_Options,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_input_path(
      options: *mut root::Sass_Options,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_output_path(
      options: *mut root::Sass_Options,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_source_map_file(
      options: *mut root::Sass_Options,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_source_map_root(
      options: *mut root::Sass_Options,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_c_headers(options: *mut root::Sass_Options) -> root::Sass_Importer_List;
  }
  extern "C" {
    pub fn sass_option_get_c_importers(
      options: *mut root::Sass_Options,
    ) -> root::Sass_Importer_List;
  }
  extern "C" {
    pub fn sass_option_get_c_functions(
      options: *mut root::Sass_Options,
    ) -> root::Sass_Function_List;
  }
  extern "C" {
    pub fn sass_option_set_precision(
      options: *mut root::Sass_Options,
      precision: ::std::os::raw::c_int,
    );
  }
  extern "C" {
    pub fn sass_option_set_output_style(
      options: *mut root::Sass_Options,
      output_style: root::Sass_Output_Style,
    );
  }
  extern "C" {
    pub fn sass_option_set_source_comments(options: *mut root::Sass_Options, source_comments: bool);
  }
  extern "C" {
    pub fn sass_option_set_source_map_embed(
      options: *mut root::Sass_Options,
      source_map_embed: bool,
    );
  }
  extern "C" {
    pub fn sass_option_set_source_map_contents(
      options: *mut root::Sass_Options,
      source_map_contents: bool,
    );
  }
  extern "C" {
    pub fn sass_option_set_source_map_file_urls(
      options: *mut root::Sass_Options,
      source_map_file_urls: bool,
    );
  }
  extern "C" {
    pub fn sass_option_set_omit_source_map_url(
      options: *mut root::Sass_Options,
      omit_source_map_url: bool,
    );
  }
  extern "C" {
    pub fn sass_option_set_is_indented_syntax_src(
      options: *mut root::Sass_Options,
      is_indented_syntax_src: bool,
    );
  }
  extern "C" {
    pub fn sass_option_set_indent(
      options: *mut root::Sass_Options,
      indent: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_linefeed(
      options: *mut root::Sass_Options,
      linefeed: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_input_path(
      options: *mut root::Sass_Options,
      input_path: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_output_path(
      options: *mut root::Sass_Options,
      output_path: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_plugin_path(
      options: *mut root::Sass_Options,
      plugin_path: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_include_path(
      options: *mut root::Sass_Options,
      include_path: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_source_map_file(
      options: *mut root::Sass_Options,
      source_map_file: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_source_map_root(
      options: *mut root::Sass_Options,
      source_map_root: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_set_c_headers(
      options: *mut root::Sass_Options,
      c_headers: root::Sass_Importer_List,
    );
  }
  extern "C" {
    pub fn sass_option_set_c_importers(
      options: *mut root::Sass_Options,
      c_importers: root::Sass_Importer_List,
    );
  }
  extern "C" {
    pub fn sass_option_set_c_functions(
      options: *mut root::Sass_Options,
      c_functions: root::Sass_Function_List,
    );
  }
  extern "C" {
    pub fn sass_context_get_output_string(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_error_status(ctx: *mut root::Sass_Context) -> ::std::os::raw::c_int;
  }
  extern "C" {
    pub fn sass_context_get_error_json(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_error_text(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_error_message(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_error_file(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_error_src(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_error_line(ctx: *mut root::Sass_Context) -> root::size_t;
  }
  extern "C" {
    pub fn sass_context_get_error_column(ctx: *mut root::Sass_Context) -> root::size_t;
  }
  extern "C" {
    pub fn sass_context_get_source_map_string(
      ctx: *mut root::Sass_Context,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_included_files(
      ctx: *mut root::Sass_Context,
    ) -> *mut *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_include_path_size(options: *mut root::Sass_Options) -> root::size_t;
  }
  extern "C" {
    pub fn sass_option_get_include_path(
      options: *mut root::Sass_Options,
      i: root::size_t,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_option_get_plugin_path_size(options: *mut root::Sass_Options) -> root::size_t;
  }
  extern "C" {
    pub fn sass_option_get_plugin_path(
      options: *mut root::Sass_Options,
      i: root::size_t,
    ) -> *const ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_get_included_files_size(ctx: *mut root::Sass_Context) -> root::size_t;
  }
  extern "C" {
    pub fn sass_context_take_error_json(
      ctx: *mut root::Sass_Context,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_error_text(
      ctx: *mut root::Sass_Context,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_error_message(
      ctx: *mut root::Sass_Context,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_error_file(
      ctx: *mut root::Sass_Context,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_error_src(ctx: *mut root::Sass_Context)
      -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_output_string(
      ctx: *mut root::Sass_Context,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_source_map_string(
      ctx: *mut root::Sass_Context,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_context_take_included_files(
      ctx: *mut root::Sass_Context,
    ) -> *mut *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_compiler_get_state(compiler: *mut root::Sass_Compiler)
      -> root::Sass_Compiler_State;
  }
  extern "C" {
    pub fn sass_compiler_get_context(compiler: *mut root::Sass_Compiler)
      -> *mut root::Sass_Context;
  }
  extern "C" {
    pub fn sass_compiler_get_options(compiler: *mut root::Sass_Compiler)
      -> *mut root::Sass_Options;
  }
  extern "C" {
    pub fn sass_compiler_get_import_stack_size(compiler: *mut root::Sass_Compiler) -> root::size_t;
  }
  extern "C" {
    pub fn sass_compiler_get_last_import(
      compiler: *mut root::Sass_Compiler,
    ) -> root::Sass_Import_Entry;
  }
  extern "C" {
    pub fn sass_compiler_get_import_entry(
      compiler: *mut root::Sass_Compiler,
      idx: root::size_t,
    ) -> root::Sass_Import_Entry;
  }
  extern "C" {
    pub fn sass_compiler_get_callee_stack_size(compiler: *mut root::Sass_Compiler) -> root::size_t;
  }
  extern "C" {
    pub fn sass_compiler_get_last_callee(
      compiler: *mut root::Sass_Compiler,
    ) -> root::Sass_Callee_Entry;
  }
  extern "C" {
    pub fn sass_compiler_get_callee_entry(
      compiler: *mut root::Sass_Compiler,
      idx: root::size_t,
    ) -> root::Sass_Callee_Entry;
  }
  extern "C" {
    pub fn sass_option_push_plugin_path(
      options: *mut root::Sass_Options,
      path: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_option_push_include_path(
      options: *mut root::Sass_Options,
      path: *const ::std::os::raw::c_char,
    );
  }
  extern "C" {
    pub fn sass_find_file(
      path: *const ::std::os::raw::c_char,
      opt: *mut root::Sass_Options,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_find_include(
      path: *const ::std::os::raw::c_char,
      opt: *mut root::Sass_Options,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_compiler_find_file(
      path: *const ::std::os::raw::c_char,
      compiler: *mut root::Sass_Compiler,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass_compiler_find_include(
      path: *const ::std::os::raw::c_char,
      compiler: *mut root::Sass_Compiler,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass2scss(
      sass: *const ::std::os::raw::c_char,
      options: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
  }
  extern "C" {
    pub fn sass2scss_version() -> *const ::std::os::raw::c_char;
  }
}
